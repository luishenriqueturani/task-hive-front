/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Task Hive API
 * Task Hive API description
 * OpenAPI spec version: 1.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  AuthCheckTokenDto,
  AuthForgetPasswordDto,
  AuthLoginDto,
  AuthResetPasswordDto,
  ChangeTaskStatusDto,
  CreateCompanyDto,
  CreateProjectDto,
  CreateProjectStageDto,
  CreateSubtaskDto,
  CreateTaskDto,
  CreateToDoDto,
  CreateUserDto,
  UpdateCompanyDto,
  UpdateProjectDto,
  UpdateProjectStageDto,
  UpdateSubtaskDto,
  UpdateTaskDto,
  UpdateToDoDto,
  UpdateUserDto
} from './schemas';

export const appControllerGetHello = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/`,options
    );
  }

export const usersControllerCreate = <TData = AxiosResponse<void>>(
    createUserDto: CreateUserDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/users`,
      createUserDto,options
    );
  }

export const usersControllerFindAll = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users`,options
    );
  }

export const usersControllerFindOne = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/${id}`,options
    );
  }

export const usersControllerUpdate = <TData = AxiosResponse<void>>(
    id: string,
    updateUserDto: UpdateUserDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/users/${id}`,
      updateUserDto,options
    );
  }

export const usersControllerSoftDelete = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/users/${id}`,undefined,options
    );
  }

export const usersControllerRemove = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/users/${id}`,options
    );
  }

export const authControllerLogin = <TData = AxiosResponse<void>>(
    authLoginDto: AuthLoginDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/login`,
      authLoginDto,options
    );
  }

export const authControllerLogout = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/logout`,undefined,options
    );
  }

export const authControllerForgetPassword = <TData = AxiosResponse<void>>(
    authForgetPasswordDto: AuthForgetPasswordDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/forget-password`,
      authForgetPasswordDto,options
    );
  }

export const authControllerCheckToken = <TData = AxiosResponse<void>>(
    authCheckTokenDto: AuthCheckTokenDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/check-token`,
      authCheckTokenDto,options
    );
  }

export const authControllerResetPassword = <TData = AxiosResponse<void>>(
    authResetPasswordDto: AuthResetPasswordDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/reset-password`,
      authResetPasswordDto,options
    );
  }

export const toDoControllerCreate = <TData = AxiosResponse<void>>(
    createToDoDto: CreateToDoDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/to-do`,
      createToDoDto,options
    );
  }

export const toDoControllerFindAll = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/to-do`,options
    );
  }

export const toDoControllerFindOne = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/to-do/${id}`,options
    );
  }

export const toDoControllerUpdate = <TData = AxiosResponse<void>>(
    id: string,
    updateToDoDto: UpdateToDoDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/to-do/${id}`,
      updateToDoDto,options
    );
  }

export const toDoControllerRemove = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/to-do/${id}`,undefined,options
    );
  }

export const toDoControllerEndTask = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/to-do/end/${id}`,undefined,options
    );
  }

export const toDoControllerChangeTaskStatus = <TData = AxiosResponse<void>>(
    id: string,
    changeTaskStatusDto: ChangeTaskStatusDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/to-do/status/${id}`,
      changeTaskStatusDto,options
    );
  }

export const toDoControllerNextDateRecurringTask = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/to-do/nextDateRecurring/${id}`,undefined,options
    );
  }

export const projectsControllerCreate = <TData = AxiosResponse<void>>(
    createProjectDto: CreateProjectDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/projects`,
      createProjectDto,options
    );
  }

export const projectsControllerFindAll = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/projects`,options
    );
  }

export const projectsControllerFindOne = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/projects/${id}`,options
    );
  }

export const projectsControllerUpdate = <TData = AxiosResponse<void>>(
    id: string,
    updateProjectDto: UpdateProjectDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/projects/${id}`,
      updateProjectDto,options
    );
  }

export const projectsControllerRemove = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/projects/${id}`,options
    );
  }

export const companiesControllerCreate = <TData = AxiosResponse<void>>(
    createCompanyDto: CreateCompanyDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/companies`,
      createCompanyDto,options
    );
  }

export const companiesControllerFindAll = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/companies`,options
    );
  }

export const companiesControllerFindOne = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/companies/${id}`,options
    );
  }

export const companiesControllerUpdate = <TData = AxiosResponse<void>>(
    id: string,
    updateCompanyDto: UpdateCompanyDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/companies/${id}`,
      updateCompanyDto,options
    );
  }

export const companiesControllerRemove = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/companies/${id}`,options
    );
  }

export const projectStagesControllerCreate = <TData = AxiosResponse<void>>(
    createProjectStageDto: CreateProjectStageDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/project-stages`,
      createProjectStageDto,options
    );
  }

export const projectStagesControllerFindAll = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/project-stages`,options
    );
  }

export const projectStagesControllerFindAllByProject = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/project-stages/project/${id}`,options
    );
  }

export const projectStagesControllerFindOne = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/project-stages/${id}`,options
    );
  }

export const projectStagesControllerUpdate = <TData = AxiosResponse<void>>(
    id: string,
    updateProjectStageDto: UpdateProjectStageDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/project-stages/${id}`,
      updateProjectStageDto,options
    );
  }

export const projectStagesControllerRemove = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/project-stages/${id}`,options
    );
  }

export const tasksControllerCreate = <TData = AxiosResponse<void>>(
    createTaskDto: CreateTaskDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/tasks`,
      createTaskDto,options
    );
  }

export const tasksControllerFindAll = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/tasks`,options
    );
  }

export const tasksControllerFindByStage = <TData = AxiosResponse<void>>(
    stage: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/tasks/stage/${stage}`,options
    );
  }

export const tasksControllerFindOne = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/tasks/${id}`,options
    );
  }

export const tasksControllerUpdate = <TData = AxiosResponse<void>>(
    id: string,
    updateTaskDto: UpdateTaskDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/tasks/${id}`,
      updateTaskDto,options
    );
  }

export const tasksControllerRemove = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/tasks/${id}`,options
    );
  }

export const tasksControllerToNextStage = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/tasks/nextStage/${id}`,undefined,options
    );
  }

export const tasksControllerToPreviousStage = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/tasks/previousStage/${id}`,undefined,options
    );
  }

export const subtasksControllerCreate = <TData = AxiosResponse<void>>(
    createSubtaskDto: CreateSubtaskDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/subtasks`,
      createSubtaskDto,options
    );
  }

export const subtasksControllerFindAll = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/subtasks`,options
    );
  }

export const subtasksControllerFindOne = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/subtasks/${id}`,options
    );
  }

export const subtasksControllerUpdate = <TData = AxiosResponse<void>>(
    id: string,
    updateSubtaskDto: UpdateSubtaskDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/subtasks/${id}`,
      updateSubtaskDto,options
    );
  }

export const subtasksControllerRemove = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/subtasks/${id}`,options
    );
  }

export const subtasksControllerFindByTaskId = <TData = AxiosResponse<void>>(
    taskId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/subtasks/task/${taskId}`,options
    );
  }

export type AppControllerGetHelloResult = AxiosResponse<void>
export type UsersControllerCreateResult = AxiosResponse<void>
export type UsersControllerFindAllResult = AxiosResponse<void>
export type UsersControllerFindOneResult = AxiosResponse<void>
export type UsersControllerUpdateResult = AxiosResponse<void>
export type UsersControllerSoftDeleteResult = AxiosResponse<void>
export type UsersControllerRemoveResult = AxiosResponse<void>
export type AuthControllerLoginResult = AxiosResponse<void>
export type AuthControllerLogoutResult = AxiosResponse<void>
export type AuthControllerForgetPasswordResult = AxiosResponse<void>
export type AuthControllerCheckTokenResult = AxiosResponse<void>
export type AuthControllerResetPasswordResult = AxiosResponse<void>
export type ToDoControllerCreateResult = AxiosResponse<void>
export type ToDoControllerFindAllResult = AxiosResponse<void>
export type ToDoControllerFindOneResult = AxiosResponse<void>
export type ToDoControllerUpdateResult = AxiosResponse<void>
export type ToDoControllerRemoveResult = AxiosResponse<void>
export type ToDoControllerEndTaskResult = AxiosResponse<void>
export type ToDoControllerChangeTaskStatusResult = AxiosResponse<void>
export type ToDoControllerNextDateRecurringTaskResult = AxiosResponse<void>
export type ProjectsControllerCreateResult = AxiosResponse<void>
export type ProjectsControllerFindAllResult = AxiosResponse<void>
export type ProjectsControllerFindOneResult = AxiosResponse<void>
export type ProjectsControllerUpdateResult = AxiosResponse<void>
export type ProjectsControllerRemoveResult = AxiosResponse<void>
export type CompaniesControllerCreateResult = AxiosResponse<void>
export type CompaniesControllerFindAllResult = AxiosResponse<void>
export type CompaniesControllerFindOneResult = AxiosResponse<void>
export type CompaniesControllerUpdateResult = AxiosResponse<void>
export type CompaniesControllerRemoveResult = AxiosResponse<void>
export type ProjectStagesControllerCreateResult = AxiosResponse<void>
export type ProjectStagesControllerFindAllResult = AxiosResponse<void>
export type ProjectStagesControllerFindAllByProjectResult = AxiosResponse<void>
export type ProjectStagesControllerFindOneResult = AxiosResponse<void>
export type ProjectStagesControllerUpdateResult = AxiosResponse<void>
export type ProjectStagesControllerRemoveResult = AxiosResponse<void>
export type TasksControllerCreateResult = AxiosResponse<void>
export type TasksControllerFindAllResult = AxiosResponse<void>
export type TasksControllerFindByStageResult = AxiosResponse<void>
export type TasksControllerFindOneResult = AxiosResponse<void>
export type TasksControllerUpdateResult = AxiosResponse<void>
export type TasksControllerRemoveResult = AxiosResponse<void>
export type TasksControllerToNextStageResult = AxiosResponse<void>
export type TasksControllerToPreviousStageResult = AxiosResponse<void>
export type SubtasksControllerCreateResult = AxiosResponse<void>
export type SubtasksControllerFindAllResult = AxiosResponse<void>
export type SubtasksControllerFindOneResult = AxiosResponse<void>
export type SubtasksControllerUpdateResult = AxiosResponse<void>
export type SubtasksControllerRemoveResult = AxiosResponse<void>
export type SubtasksControllerFindByTaskIdResult = AxiosResponse<void>
